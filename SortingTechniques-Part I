/* Headers */
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<time.h>

/* Function Prototypes */
int Display(int*,int);
int Copy(int*,int*,int);
int AscendingList(int*,int);
int DescendingList(int*,int);
int PartiallyAscendingList(int*,int);
void RandomList(int*,int);
int countList(int*,int,int,int);
int InsertionSort(int*,int);
int SelectionSort(int*,int);
int ShellSort(int*,int);
int CountingSort(int*,int,int);

/* Main */
int main()
{
  int choice1,choice2,choice3,no_of_ele;
  int k,i,ran,max,min;
  time_t t1,t2;
  
  do
  {
    printf("\n\nPerform Sorting ? 1.YES 0.NO : ");
    scanf("%d",&choice1);
    if(choice1==1)
    {
     do
      {
        printf("\nEnter number of Elements(Should be a multiple of 10) : ");
        scanf("%d",&no_of_ele);
      }while(no_of_ele%10!=0);
      int arr[no_of_ele],arr1[no_of_ele];
      do
      {
        printf("\n\nCHOOSE LIST TYPE\n1.Ascending \n2.Descending \n3.Partially Ascending \n4.Random\n5.For Counting Sort\n0.Exit");
          printf("\nEnter your operation code : ");
          scanf("%d",&choice2);
          switch(choice2)
            {
              case 1:AscendingList(arr,no_of_ele);
                    
                     do
                      {
                        printf("\n\nCHOOSE SORTING TECHNIQUE\n1.Insertion Sort \n2.Selection Sort\n3.Shell Sort\n0.EXIT");
                        printf("\nEnter your operation code : ");
                        scanf("%d",&choice3);
                          switch(choice3)
                          {
                            case 1: Copy(arr,arr1,no_of_ele);
                                    if(no_of_ele<=10)
                                    {
                                    printf("\n\n LIST BEFORE SORTING \n\n");
                                    Display(arr1,no_of_ele);
                                    printf("\n\n LIST AFTER SORTING \n\n");
                                    }
                                    t1=clock();
                                    InsertionSort(arr1,no_of_ele);
                                    t2=clock();
                                    Display(arr1,no_of_ele); 
                                    printf("\nTime required is: %f",(double)(t2-t1)/CLOCKS_PER_SEC);
                                    break;
                            case 2: Copy(arr,arr1,no_of_ele);
                                   if(no_of_ele<=10)
                                    {
                                    printf("\n\n LIST BEFORE SORTING \n\n");
                                    Display(arr1,no_of_ele);
                                    printf("\n\n LIST AFTER SORTING \n\n");
                                    }
                                    t1=clock();
                                    SelectionSort(arr1,no_of_ele);
                                    t2=clock();
                                    Display(arr1,no_of_ele);
                                    printf("\nTime required is: %f",(double)(t2-t1)/CLOCKS_PER_SEC);
                                    break;
                            case 3: Copy(arr,arr1,no_of_ele);
                                    if(no_of_ele<=10)
                                    {
                                    printf("\n\n LIST BEFORE SORTING \n\n");
                                    Display(arr1,no_of_ele);
                                    printf("\n\n LIST AFTER SORTING \n\n");
                                    }
                                    t1=clock();
                                    ShellSort(arr1,no_of_ele);
                                    t2=clock();
                                    Display(arr1,no_of_ele);
                                    printf("\nTime required is: %f",(double)(t2-t1)/CLOCKS_PER_SEC);
                                    break;  
                            default:
                                    printf("\n THANK YOU !!");    
                          }
                      }while(choice3!=0);
                      break;
              case 2:DescendingList(arr,no_of_ele);
                    
                     do
                      {
                        printf("\n\nCHOOSE SORTING TECHNIQUE\n1.Insertion Sort \n2.Selection Sort\n3.Shell Sort\n0.EXIT");
                        printf("\nEnter your operation code : ");
                        scanf("%d",&choice3);
                          switch(choice3)
                          {
                            case 1: Copy(arr,arr1,no_of_ele);
                                    if(no_of_ele<=10)
                                    {
                                    printf("\n\n LIST BEFORE SORTING \n\n");
                                    Display(arr1,no_of_ele);
                                    printf("\n\n LIST AFTER SORTING \n\n");
                                    }
                                    t1=clock();
                                    InsertionSort(arr1,no_of_ele);
                                    t2=clock();
                                    Display(arr1,no_of_ele); 
                                    printf("\nTime required is: %f",(double)(t2-t1)/CLOCKS_PER_SEC);
                                    break;
                            case 2: Copy(arr,arr1,no_of_ele);
                                    if(no_of_ele<=10)
                                    {
                                    printf("\n\n LIST BEFORE SORTING \n\n");
                                    Display(arr1,no_of_ele);
                                    printf("\n\n LIST AFTER SORTING \n\n");
                                    }
                                    t1=clock();
                                    SelectionSort(arr1,no_of_ele);
                                    t2=clock();       
                                    Display(arr1,no_of_ele);
                                    printf("\nTime required is: %f",(double)(t2-t1)/CLOCKS_PER_SEC);
                                    break;
                            case 3: Copy(arr,arr1,no_of_ele);
                                    if(no_of_ele<=10)
                                    {
                                    printf("\n\n LIST BEFORE SORTING \n\n");
                                    Display(arr1,no_of_ele);
                                    printf("\n\n LIST AFTER SORTING \n\n");
                                    }
                                    t1=clock();
                                    ShellSort(arr1,no_of_ele);
                                    t2=clock();
                                    Display(arr1,no_of_ele);
                                    printf("\nTime required is: %f",(double)(t2-t1)/CLOCKS_PER_SEC);
                                    break;  
                            default:
                                    printf("\n THANK YOU !!");    
                          }
                      }while(choice3!=0);
                      break;
              case 3:PartiallyAscendingList(arr,no_of_ele);
                    
                     do
                      {
                        printf("\n\nCHOOSE SORTING TECHNIQUE\n1.Insertion Sort \n2.Selection Sort\n3.Shell Sort \n0.EXIT");
                        printf("\nEnter your operation code : ");
                        scanf("%d",&choice3);
                          switch(choice3)
                          {
                            case 1: Copy(arr,arr1,no_of_ele);
                                    if(no_of_ele<=10)
                                    {
                                    printf("\n\n LIST BEFORE SORTING \n\n");
                                    Display(arr1,no_of_ele);
                                    printf("\n\n LIST AFTER SORTING \n\n");
                                    }
                                    t1=clock();
                                    InsertionSort(arr1,no_of_ele);
                                    t2=clock();
                                    Display(arr1,no_of_ele); 
                                    printf("\nTime required is: %f",(double)(t2-t1)/CLOCKS_PER_SEC);
                                    break;
                            case 2: Copy(arr,arr1,no_of_ele);
                                    if(no_of_ele<=10)
                                    {
                                    printf("\n\n LIST BEFORE SORTING \n\n");
                                    Display(arr1,no_of_ele);
                                    printf("\n\n LIST AFTER SORTING \n\n");
                                    }
                                    t1=clock();
                                    SelectionSort(arr1,no_of_ele);
                                    t2=clock();        
                                    Display(arr1,no_of_ele);
                                    printf("\nTime required is: %f",(double)(t2-t1)/CLOCKS_PER_SEC);
                                    break;
                            case 3: Copy(arr,arr1,no_of_ele);
                                    if(no_of_ele<=10)
                                    {
                                    printf("\n\n LIST BEFORE SORTING \n\n");
                                    Display(arr1,no_of_ele);
                                    printf("\n\n LIST AFTER SORTING \n\n");
                                    }
                                    t1=clock();
                                    ShellSort(arr1,no_of_ele);
                                    t2=clock();
                                    Display(arr1,no_of_ele);
                                    printf("\nTime required is: %f",(double)(t2-t1)/CLOCKS_PER_SEC);
                                    break;  
                            default:
                                    printf("\n THANK YOU !!");    
                          }
                      }while(choice3!=0);
                      break;
              case 4:RandomList(arr,no_of_ele);
                    
                     do
                      {
                        printf("\n\nCHOOSE SORTING TECHNIQUE\n1.Insertion Sort \n2.Selection Sort\n3.Shell Sort\n0.EXIT");
                        printf("\nEnter your operation code : ");
                        scanf("%d",&choice3);
                          switch(choice3)
                          {
                            case 1: Copy(arr,arr1,no_of_ele);
                                    if(no_of_ele<=10)
                                    {
                                    printf("\n\n LIST BEFORE SORTING \n\n");
                                    Display(arr1,no_of_ele);
                                    printf("\n\n LIST AFTER SORTING \n\n");
                                    }
                                    t1=clock();
                                    InsertionSort(arr1,no_of_ele);
                                    t2=clock();
                                    Display(arr1,no_of_ele); 
                                    printf("\nTime required is: %f",(double)(t2-t1)/CLOCKS_PER_SEC);
                                    break;
                            case 2: Copy(arr,arr1,no_of_ele);
                                    if(no_of_ele<=10)
                                    {
                                    printf("\n\n LIST BEFORE SORTING \n\n");
                                    Display(arr1,no_of_ele);
                                    printf("\n\n LIST AFTER SORTING \n\n");
                                    }
                                    t1=clock();
                                    SelectionSort(arr1,no_of_ele);
                                    t2=clock();       
                                    Display(arr1,no_of_ele);
                                    printf("\nTime required is: %f",(double)(t2-t1)/CLOCKS_PER_SEC);
                                    break;
                            case 3: Copy(arr,arr1,no_of_ele);
                                    if(no_of_ele<=10)
                                    {
                                    printf("\n\n LIST BEFORE SORTING \n\n");
                                    Display(arr1,no_of_ele);
                                    printf("\n\n LIST AFTER SORTING \n\n");
                                    }
                                    t1=clock();
                                    ShellSort(arr1,no_of_ele);
                                    t2=clock();
                                    Display(arr1,no_of_ele);
                                    printf("\nTime required is: %f",(double)(t2-t1)/CLOCKS_PER_SEC);
                                    break;  
                            default:
                                    printf("\n THANK YOU !!");    
                          }
                      }while(choice3!=0);
                      break;
              case 5: printf("Enter Maximum Value of Range : ");
                      scanf("%d",&max);
                      printf("Enter Minimum Value of Range : ");
                      scanf("%d",&min);
                      countList(arr,no_of_ele,max,min);
                      if(no_of_ele<=10)
                      {
                      printf("\n\n LIST BEFORE SORTING \n\n");
                      Display(arr,no_of_ele);
                      printf("\n\n LIST AFTER SORTING \n\n");
                      }
                      t1=clock();
                      ran=(max-min);
                      CountingSort(arr,no_of_ele,ran);
                      t2=clock();
                      Display(arr,no_of_ele);
                      printf("\nTime required is: %f",(double)(t2-t1)/CLOCKS_PER_SEC);
                      break;                     
              default:
                      printf("\n xxxxxx EXITED xxxxxx");    
            }
      }while(choice2!=0);

    }
    else
      printf("\n\n======TERMINATING PROGRAM======\n\n");
  }while(choice1!=0);
 return 0;  
}

/* Function Definition */
int Display(int arr[],int no_of_ele )
    {
        if(no_of_ele<=30)
        {
          int i;
          for(i=0;i<no_of_ele;i++)
          {
            printf("|%d|",arr[i]);
          }   
        } 
    }

int Copy(int arr[],int arr1[],int no_of_ele)
{
	int i;
	for(i=0;i<=no_of_ele;i++)
	{
	  arr1[i]=arr[i]; 
	}
}
int AscendingList(int arr[],int no_of_ele)
{
  int knt;
  for(knt=0;knt<no_of_ele;knt++)
    {
      arr[knt]=987698 + 100*knt;
    }
}
int DescendingList(int arr[],int no_of_ele)
{
    int knt;
  for(knt=0;knt<no_of_ele;knt++)
      {
        arr[knt]=9844444 - 100*knt;
      }  
}
int PartiallyAscendingList(int arr[],int no_of_ele )
{
    int knt;
  for(knt=0;knt<no_of_ele;knt++)
      {
        if(knt%5==0)
          arr[knt]=7777777 + 10*knt;
        else
          arr[knt]=7777777 + 100*knt;
      }

}
void RandomList(int arr[],int no_of_ele)
{
  int i;
  int offset=98765;
  srand(offset);
  if( no_of_ele>0)
  {
    for(i=0;i< no_of_ele;i++)
    {
      arr[i]=rand()/13;
    }
  }
  return;
}
int countList(int arr[],int no_of_ele,int max,int min)
{
  int i,key;
  if(no_of_ele>0)
  {
    for(i=0;i<no_of_ele;)
    {
      key=rand()%max;
      if(key>=min)
      {
        arr[i]=key-min;
        i++;
      }
    }
  }
}
int InsertionSort(int arr[],int no_of_ele )
{ 
  int i,j,key;
  for(i=1;i<no_of_ele;i++)
  {
    key=arr[i];
    j=i-1;
    while(j>=0 && arr[j]>key)
    {
      arr[j+1]=arr[j];
      j=j-1;
      
    }
    arr[j+1]=key;
  }
}
int SelectionSort(int arr[],int no_of_ele)
{
  int i, swap,min_pos,j;
 
  for(i=0;i<(no_of_ele-1);i++)
  {
    min_pos=i;
   
    for(j=i+1;j<no_of_ele;j++)
    {
      if (arr[min_pos]>arr[j])
        min_pos=j;
    }
    if(min_pos!=i)
    {
      swap=arr[i];
      arr[i]=arr[min_pos];
      arr[min_pos]=swap;
    }
  }
}

int ShellSort(int arr[],int no_of_ele)
{
  int gap,i,j,key;
  for (gap=((no_of_ele)/2);gap>0;gap/=2) 
    { 
     for (i=gap+1;i<no_of_ele;i+=1) 
        { 
          key = arr[i];              
          for (j=i;(j>=gap)&&(arr[j-gap]>key);j-=gap) 
          {
            arr[j] = arr[j-gap]; 
          }
          arr[j] = key; 
        } 
    }
}

int CountingSort(int arr[] ,int n,int ran)
{
    int count[ran+1];
    int sorted[n];int i,j;
    for(i=0 ; i<=ran; i++) {
        count[i] = 0;
    }
    for(j=0;j<n;j++)
    {
      count[arr[j]]=count[arr[j]]+1;
    }
    for(i=1;i<=ran;i++)
    {
      count[i]=count[i]+count[i-1];
    }
    for(j=0;j<n;j++)
    {
      sorted[count[arr[j]]-1]=arr[j];
      --count[arr[j]];
    }
     for(i = 0; i<n; i++) 
        arr[i] = sorted[i];
}